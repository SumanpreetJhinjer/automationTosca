package infra.getDetails;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;

import infra.DBConnections.ApplicationConnection;
import infra.Emails.EmailReports;
import infra.FactorySet.FactoryMethods;

public class MachineDetails {
	ApplicationConnection appCon=new ApplicationConnection();
	FactoryMethods fm= new FactoryMethods();
	
	
	public ArrayList<HashMap<String, Object>> UpdateCleanMachineDetails(HashMap details, String serverPath) throws FileNotFoundException, IOException {
		ArrayList<HashMap<String, Object>> machineDetails=null;
		
		String appname = (String) details.get("appname");
		String emailID = (String) details.get("emailID");
		String environment = (String) details.get("environment");
		String type = (String) details.get("type");
		String installDrive = (String) details.get("installDrive");
		String hostname = (String) details.get("hostname");
		String osSelect = (String) details.get("osSelect");
		String otherDrive = (String) details.get("otherDrive");
		machineDetails=updateCleanQuery(appname,emailID,environment,type,installDrive,hostname,osSelect,otherDrive);
		
		EmailReports reports=new EmailReports();
		String emailStatus=reports.requestBuildEmail(serverPath,appname,emailID,environment,type, machineDetails);
		
		
		return machineDetails;
	}
	
	
	
	public ArrayList<HashMap<String, Object>> getCleanMachineDetails(String appname,String emailID,String environment,String type,String installDrive,String hostname, String osSelect, String otherDrive ) {
		ArrayList<HashMap<String, Object>> result=null;
		
		
		
		String getmachineQuery="select * from infra_machinedetails where assigned_status='Available' and initial_build='Clean' "
				+ " and ASSIGNED_TEAM is null and PROJECT is null and requester_id is null";
		Connection con=appCon.applicationDBConnection();
		try(ResultSet rss = con.createStatement().executeQuery(getmachineQuery) ){
			result=fm.resultSetToArrayList(rss);
			//updateCleanQuery(result, userID, emailID, teamName, project, purpose);
			/*RemoteExecution rex= new RemoteExecution();
			rex.connectRemoteComputer();*/
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		finally {
			try {
				con.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		
		
		return result;
	}

	public ArrayList<HashMap<String, Object>> updateCleanQuery(String appname,String emailID,String environment,String type,String installDrive,String hostname, String osSelect, String otherDrive) {
		ArrayList<HashMap<String, Object>> updateResult=null;
		String machineNames="";
		
		String requestNumber="1000";
//		        System.out.println("key = " + key);
		String updateQuery="UPDATE ssp_env_req_details SET appname='"+appname+"', emailID='"+emailID+"', enviornment='"+environment+"', type='"+type+"' , installDrive='"+installDrive+"' , hostname='"+hostname+"', osSelect='"+osSelect+"', otherDrive='"+otherDrive+"'";
		System.out.println("executeUpdatequery "+updateQuery);
		Connection con=appCon.applicationDBConnection();
		try{
			int executeUpdate = con.createStatement().executeUpdate(updateQuery);
			System.out.println("executeUpdate "+executeUpdate);
			//updateResult="";
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		finally {
			try {
				con.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		return updateResult;
		
	}

	
}
